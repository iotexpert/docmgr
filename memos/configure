#!/usr/bin/env python
"""
This file contains functions used to configure the memosystem.  Probably should only be run one time
"""

import sys
import os
import shutil
try:
    import settings_local
except ImportError:
    pass
from flask import current_app
from memos import db,create_app
from memos.models.User import User
from memos.models.Memo import Memo

def init_app():
    app = create_app()
    app.app_context().push()
    db.init_app(app)
    

def create_db():
    # Create the database
    db.create_all()

def copy_static():
   # Copy the files into the static folder
    src = os.path.join("memos","template_static_files")
    dst = os.path.join("memos","static")

    if not os.path.exists(dst):
        os.makedirs(dst)
    shutil.copytree(src,dst,dirs_exist_ok=True)    

def create_user(uepw=None):
    
    if "LDAP_HOST" in os.environ:
        print("Failed - you can only create users if not using LDAP/AD")
        return()

    temp = uepw.split(":")
    if len(temp)<3 or len(temp)>4:
        print("String should be user:password or user:password:admin")

    username = temp[0]
    email = temp[1]
    password = temp[2]

    if len(temp) == 4:
        admin = True
    else:
        admin = False

    print(f"User = {username} Email = {email} Password = {password} Admin={admin}")

    user =  User(username=username, password=User.create_hash_pw(password),email=email, admin=admin)
    db.session.add(user)
    db.session.commit()

def update_admin(username,admin):
    print("update admin not implemented")


def update_readall(username,readall):
    print("update readall not implemented")


def print_usage():

    print("--all -a                      : configure database & copyfiles")
    print("-f                            : copy files")
    print("-c                            : configure database")
    print("-u user:email:pw[:admin]      : create user ... user:email:pw or admin user:email:pw:admin")
    print("-h --help                     : This help message")
    print("-ad --admin user true|false   : Change the admin state of the user")
    print("-ra --readall user true|false : Change the readall state of the user")


if __name__ == "__main__":

    app = None
    init_app()
    
    args = sys.argv[1:]

    if len(args) == 0 or "-h" in args or "--help" in args:
        print_usage()
        sys.exit()
         
    if len(args) == 0 or "--all" in args or "-a" in args:
        create_db()
        copy_static()
        sys.exit()

    if "-c" in args:
        create_db()
        
    if "-f" in args:
        copy_static()
        
    if "-u" in args:
        pos = args.index("-u")
        if len(args) < pos or args[pos+1][0] == "-":
            print(f"pos = {pos} arg[pos]={args[pos]}")
            print("Error in args")
            sys.exit()
            
        create_user(args[pos+1])             

    if "-ad" in args or "--admin" in args:
        update_admin()
        pass
        pos = args.index("-u")
        if len(args) < pos or args[pos+1][0] == "-":
            print(f"pos = {pos} arg[pos]={args[pos]}")
            print("Error in args")
            sys.exit()
            
        create_user(args[pos+1])             

    if "-ra" in args or "--readall" in args:
        update_readall()
        pass
        pos = args.index("-u")
        if len(args) < pos or args[pos+1][0] == "-":
            print(f"pos = {pos} arg[pos]={args[pos]}")
            print("Error in args")
            sys.exit()
            
        create_user(args[pos+1])             
